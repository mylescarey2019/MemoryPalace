{"version":3,"sources":["components/Score/index.js","components/Cell/index.js","components/Message/index.js","components/Game/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["Score","props","id","className","scoreName","score","Cell","onClick","clickSymbol","symbol","elemClass","Message","msgTxt","pickedSymbols","curScr","hghScr","baseSymbolList","reloadSymbolList","gameSymbols","map","push","Game","state","highScore","currentScore","shuffleSymbols","splice","length","forEach","element","setState","tile","nextSymbol","Math","floor","random","indexOf","console","log","includes","this","key","Component","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b55fc351.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\nimport '../../App.css';\n\n\nexport default function Score(props) {\n  // console.log(props);\n  return (\n    <div>\n      <p id={props.id} className=\"card-text info-field\">{props.scoreName} {props.score}</p>\n    </div>  \n  );\n};\n","import React from 'react';\nimport \"./style.css\";\n\nexport default function Cell(props) {\n  // console.log(props);\n  return (\n    <div  className=\"game-cell\" onClick={() => props.clickSymbol(props.symbol)}>\n      <p className={props.elemClass}>{props.symbol}</p>\n    </div>\n  )\n}\n","import React from 'react';\nimport './style.css';\nimport '../../App.css';\n\n\nexport default function Message(props) {\n  // console.log(props);\n  return (\n    <div>\n      <p id={props.id} className=\"card-text info-field\">{props.msgTxt}</p>\n    </div>  \n  );\n};\n","import React, { Component } from 'react'\nimport Score from '../Score';\nimport Cell from '../Cell';\nimport Message from '../Message';\nimport gameSymbols from \"../../symbols.json\";\n\nvar pickedSymbols = [];\nvar curScr = 0;\nvar hghScr = 0;\n\nvar baseSymbolList =[];\nvar reloadSymbolList = [];\n\n// console.log(gameSymbols);\ngameSymbols.map(symbol => {\n  return baseSymbolList.push(symbol.symbol)\n});\n\n// console.log(`base symbol list: ${baseSymbolList}`);\n\n\nexport default class Game extends Component {\n  state = {\n    highScore: 0,\n    currentScore: 0,\n    msgTxt: \"To Play - Select no image twice\",\n    gameSymbols\n  };\n  \n  \n\n  shuffleSymbols = () => {\n    // console.log('in game.shuffleSymbols');\n    // clear symbol list and reload from master\n    reloadSymbolList.splice(0,reloadSymbolList.length);\n    baseSymbolList.forEach(element => {\n      reloadSymbolList.push(element);\n    });\n    // console.log(`reload symbol list ${reloadSymbolList}`); \n    // randomly assign symbols from reloaded list to the state\n    this.setState(state => {\n      const gameSymbols = state.gameSymbols.map(tile => {\n        var nextSymbol = reloadSymbolList[Math.floor(Math.random() * reloadSymbolList.length)];\n        reloadSymbolList.splice(reloadSymbolList.indexOf(nextSymbol),1);\n        // var rotation = Math.floor(Math.random() * 2);\n        var newElemClass = 'game-cell-symbol';\n        // have taken out the rotate image component until code can be \n        // refactored to have square tiles\n        // rectangle tiles causing problem when the image is rotated because\n        // the image in the div ends up with a non-visible box model that extends perpendicular \n        // the containing div.  That in turns allows the hover to act on the wrong tile.\n\n        // switch (rotation) {\n        //   case 0: newElemClass += ' rotate90';\n        //     break;\n\n        //   case 1: newElemClass += ' rotate180';\n        //     break;\n\n        //   case 2: newElemClass += ' rotate180';\n        //     break;\n        //   default: newElemClass = 'game-cell-symbol'\n        //     break;  \n        // };\n\n        return {\n          \"id\": tile.id,\n          \"symbol\": nextSymbol,\n          // \"elemClass\": tile.elemClass\n          \"elemClass\": newElemClass\n        }\n      });\n      return {gameSymbols}\n    });\n \n  }\n\n  // if symbol tile on game is clicked check if used before and update game/state \n  // appropriately \n  clickSymbol = symbol => {\n    console.log(`you clicked: ${symbol}`);\n    console.log(`high score:  ${this.state.highScore}  current-score: ${this.state.currentScore}`);\n\n    if (pickedSymbols.includes(symbol)) {\n      console.log('already picked that one');\n      this.setState({ msgTxt: 'Already Picked - Pick another to Play Again'});\n      this.setState({ currentScore: 0});\n      // this.setState({ pickedSymbols: []});\n      pickedSymbols = [];\n      curScr = 0;\n      // need to shuffle the game symbols\n    } else {\n      console.log(\"that one is a new one\");\n      this.setState({ msgTxt: ''});\n      this.setState({currentScore: this.state.currentScore + 1});\n      curScr++;\n      pickedSymbols.push(symbol);\n      console.log(`picked symbol list: ${pickedSymbols}`);\n    };\n\n    // console.log('time to shuffle the symbol array');\n    this.shuffleSymbols();\n\n    console.log(`length of picked symbols array: ${pickedSymbols.length}`);\n    // if pickedSymbols is not empty then a new symbol was found\n    // otherwise a repeat was picked so game was restarted\n    // set set accordingly\n    // if still playing current game check to see if new High Score\n    // else time to reset game board\n    if (pickedSymbols.length > 0) {\n      if (pickedSymbols.length === 16) {\n        this.setState({highScore: curScr});\n        hghScr = curScr;\n        this.setState({ msgTxt: '16 for 16 - Perfect Score !'});\n        pickedSymbols = [];\n        // commenting this out to allow player to keep scoring past 16 \n        // this.setState({currentScore: 0});\n      } else if (curScr > hghScr) {\n        this.setState({highScore: curScr});\n        hghScr = curScr;\n        console.log(\"new high score\");\n        this.setState({ msgTxt: 'That is a new High Score'});\n      }\n    };\n    \n\n    // console.log(`Picked Symbols: ${pickedSymbols}`);\n    // // console.log(`UPDATED: high score:  ${this.state.highScore}  current-score: ${this.state.currentScore}`);\n    // console.log(`UPDATED: high score:  ${hghScr}  current-score: ${curScr}`);\n  };\n\n  \n  render() {\n    return (\n      <div className=\"main-div\">\n        <Score id=\"high-score\" scoreName='High Score:' score={this.state.highScore} />\n        <Score id=\"current-score\" scoreName='Current Score:' score={this.state.currentScore} />\n        <Message id=\"message\" msgTxt={this.state.msgTxt} />\n        {/* need to add a Key prop here */}\n        {this.state.gameSymbols.map(symbol => (\n          <Cell\n            key={symbol.id}\n            elemClass={symbol.elemClass}\n            symbol={symbol.symbol}\n            clickSymbol={this.clickSymbol}\n          />\n        ))}\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './style.css';\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <div className=\"jumbotron\">\n        <h1 className=\"display-3\">Memory Palace</h1>\n        <p className=\"lead\"></p>\n        <p className=\"info-field\" id=\"sub-title\">Exercise the Medial Parietal Cortex</p>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport Game from './components/Game';\nimport Header from './components/Header';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}